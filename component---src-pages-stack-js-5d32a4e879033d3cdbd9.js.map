{"version":3,"sources":["webpack:///./src/pages/stack.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["stack","title","async","src","charset","className","frameBorder","data-theme","data-layers","data-stack-embed","href","m","module","exports","require","default","loader","enqueue","StaticQueryContext","React","createContext","StaticQueryDataRenderer","staticQueryData","data","query","render","finalData","Fragment","StaticQuery","props","children","Consumer","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json","SEO","description","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","Header","state","isMenuOpen","handleMenu","setState","previousState","closeMenu","siteTitle","burgerClass","role","aria-label","to","aria-expanded","data-target","onClick","aria-hidden","id","Component","Layout","Date","getFullYear"],"mappings":"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","file":"component---src-pages-stack-js-5d32a4e879033d3cdbd9.js","sourcesContent":["import React from 'react';\nimport Layout from '../components/layout'\nimport SEO from \"../components/seo\"\nimport Helmet from 'react-helmet'\n\nconst stack = () => (\n    <Layout>\n        <SEO title=\"Stack\" />\n        <Helmet>\n            <script \n                async \n                src=\"https://cdn1.stackshare.io/javascripts/client-code.js\"\n                charset=\"utf-8\">\n            </script>\n        </Helmet>\n        <section className=\"hero custom-hero is-size-4-desktop is-size-5-touch\">\n            <div className=\"hero-body\">\n                <h1 className=\"title has-text-centered has-text-light\">Stack</h1>\n                <hr className=\"custom-hr\" />\n            </div>\n        </section>\n        <section className=\"section is-size-4-desktop is-size-5-touch\">\n            <div className=\"columns is-centered has-text-centered\">\n                <div className=\"column is-half\">\n                    <a\n                        frameBorder=\"0\" \n                        data-theme=\"light\" \n                        data-layers=\"1,3,4\" \n                        data-stack-embed=\"true\" \n                        href=\"https://embed.stackshare.io/stacks/embed/47bea8027a70794016085b135b1ac9\">\n                    </a>\n                </div>\n            </div>\n        </section>\n    </Layout>\n);\n\nexport default stack;","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React, { Component } from \"react\"\n\nclass Header extends Component {\n  state = {\n    isMenuOpen: false,\n  }\n\n  handleMenu = () => {\n    this.setState((previousState) => ({ \n      isMenuOpen: !previousState.isMenuOpen\n     }));\n  }\n\n  closeMenu = () => {\n    this.setState({ isMenuOpen: false })\n  }\n\n  render = () => {\n    const { siteTitle } = this.props;\n    const { isMenuOpen } = this.state;\n    const burgerClass = isMenuOpen ? 'is-active':'';\n\n    return (\n    <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n      <div className=\"navbar-brand\">\n        <Link to=\"/\" className=\"navbar-item is-size-5\">\n          {siteTitle}\n        </Link>\n\n        <a role=\"button\" className={`navbar-burger burger ${burgerClass}`} aria-label=\"menu\" aria-expanded=\"false\" data-target=\"myNavbar\" onClick={this.handleMenu}>\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n        </a>\n      </div>\n\n      <div id=\"myNavbar\" className={`navbar-menu ${burgerClass}`}>\n        <div className=\"navbar-end\">\n          <Link to=\"/\" className=\"navbar-item is-size-5\" onClick={this.closeMenu}>\n            HOME\n          </Link>\n          <Link to=\"/projects/\" className=\"navbar-item is-size-5\" onClick={this.closeMenu}>\n            PROJECTS\n          </Link>\n          <Link to=\"/stack/\" className=\"navbar-item is-size-5\" onClick={this.closeMenu}>\n            STACK\n          </Link>\n          <Link to=\"/downloads/\" className=\"navbar-item is-size-5\" onClick={this.closeMenu}>\n            DOWNLOADS\n          </Link>\n        </div>\n      </div>\n    </nav>\n    );\n  }\n}\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.scss\"\nimport '../styles/index.scss'\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      {/* <Header siteTitle={data.site.siteMetadata.title} /> */}\n      <Header siteTitle=\"BRENO BAPTISTA\" />\n      <div>\n        <main>{children}</main>\n        <footer className=\"has-text-centered\">\n          © {new Date().getFullYear()}\n          {` `}\n          Breno Baptista.\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}