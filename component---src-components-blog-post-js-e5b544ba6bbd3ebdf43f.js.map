{"version":3,"sources":["webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./src/components/Bio.js","webpack:///./src/components/BlogPost.js","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js"],"names":["MDXRenderer","require","module","Bio","query","render","data","author","site","siteMetadata","className","fixed","avatar","childImageSharp","alt","style","marginTop","marginBottom","minWidth","borderRadius","imgStyle","pageQuery","BlogPostTemplate","pageContext","post","mdx","previous","next","Layout","SEO","title","frontmatter","description","excerpt","date","body","to","fields","slug","rel","React","useMDXComponents","useMDXScope","scope","components","children","props","mdxComponents","mdxScope","End","fullScope","keys","Object","values","key","fn"],"mappings":"gFAMA,IAAMA,EAAcC,EAApB,QAEAC,UAAiB,CACfF,YAAaA,I,uIC6CAG,MAjCf,WACE,OACE,kBAAC,cAAD,CACEC,MApBQ,YAqBRC,OAAQ,SAACC,GAAU,IACTC,EAAWD,EAAKE,KAAKC,aAArBF,OACR,OACE,yBAAKG,UAAU,OACb,kBAAC,IAAD,CACEC,MAAOL,EAAKM,OAAOC,gBAAgBF,MACnCG,IAAKP,EACLQ,MAAO,CACLC,UAAW,GACXC,aAAc,EACdC,SAAU,GACVC,aAAc,QAEhBC,SAAU,CACRD,aAAc,SAGlB,sMAnBR,U,wBCvBJ,0CASO,IAAME,EAAS,aAgFPC,UAjEU,SAAC,GAA2B,IAAzBhB,EAAwB,EAAxBA,KAAMiB,EAAkB,EAAlBA,YAC1BC,EAAOlB,EAAKmB,IACVC,EAAmBH,EAAnBG,SAAUC,EAASJ,EAATI,KAElB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,MAAON,EAAKO,YAAYD,MACxBE,YAAaR,EAAKO,YAAYC,aAAeR,EAAKS,UAEpD,6BAASvB,UAAU,sDACjB,yBAAKA,UAAU,aACb,wBAAIA,UAAU,gDAAd,QAGA,wBAAIA,UAAU,iBAGlB,6BAASA,UAAU,6CACjB,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,wBACb,wBAAIA,UAAU,oBACXc,EAAKO,YAAYD,OAEpB,uBAAGpB,UAAU,QACVc,EAAKO,YAAYG,MAEpB,kBAAC,cAAD,KACGV,EAAKW,MAER,wBAAIzB,UAAU,WACd,kBAAC,EAAD,MAEA,wBAAIA,UAAU,eACZ,4BACGgB,GACC,kBAAC,OAAD,CAAMU,GAAE,OAASV,EAASW,OAAOC,KAAQC,IAAI,QAA7C,IAEG,IACAb,EAASK,YAAYD,QAI5B,4BACGH,GACC,kBAAC,OAAD,CAAMS,GAAE,OAAST,EAAKU,OAAOC,KAAQC,IAAI,QACtCZ,EAAKI,YAAYD,MACjB,IAFH,a,gyDCrElB,IAAMU,EAAQvC,EAAd,Q,EACkCA,EAAQ,QAAlCwC,E,EAAAA,iBAAkBhB,E,EAAAA,IAClBiB,EAAgBzC,EAAQ,QAAxByC,YAERxC,UAAiB,SAAqB,GAKlC,IAJFyC,EAIC,EAJDA,MACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,SACGC,E,oIACF,sCACKC,EAAgBN,EAAtB,GACMO,EAAWN,EAFhB,GAKKO,EAAMT,EAAA,SAAc,WACxB,MACE,OAAO,KAGT,IAAMU,EAAS,GAGbV,MAHa,EAIbf,OAJF,GAQM0B,EAAOC,YAAb,GACMC,EAASF,EAAA,KAAS,SAAAG,GAAG,OAAIJ,EAAJ,MAG3B,OAFQ,mCAAR,KAEOK,2BAAP,OACC,CAACV,EAlBJ,IAoBA,OAAOL,EAAA,mBAA2BI,WAAYG,GAA9C,M","file":"component---src-components-blog-post-js-e5b544ba6bbd3ebdf43f.js","sourcesContent":["/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","import React from 'react';\nimport { StaticQuery, graphql } from 'gatsby';\nimport Image from 'gatsby-image';\n\nconst bioQuery = graphql`\n  query BioQuery {\n    avatar: file(relativePath: { eq: \"profile.png\" }) {\n      childImageSharp {\n        fixed(width: 50, height: 50) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        author\n      }\n    }\n  }\n`;\n\nfunction Bio() {\n  return (\n    <StaticQuery\n      query={bioQuery}\n      render={(data) => {\n        const { author } = data.site.siteMetadata;\n        return (\n          <div className=\"bio\">\n            <Image\n              fixed={data.avatar.childImageSharp.fixed}\n              alt={author}\n              style={{\n                marginTop: 20,\n                marginBottom: 0,\n                minWidth: 50,\n                borderRadius: '100%',\n              }}\n              imgStyle={{\n                borderRadius: '50%',\n              }}\n            />\n            <p>\n              Full stack engineer who learns a new thing everyday.\n              Interested in everything that involves JavaScript and GNU/Linux,\n              but never refuses to discover new technologies.\n            </p>\n          </div>\n        );\n      }}\n    />\n  );\n}\n\nexport default Bio;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, graphql } from 'gatsby';\nimport { MDXRenderer } from 'gatsby-plugin-mdx';\n\nimport Bio from './Bio';\nimport Layout from './Layout';\nimport SEO from './SEO';\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    mdx(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      body\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n  }\n`;\n\nconst BlogPostTemplate = ({ data, pageContext }) => {\n  const post = data.mdx;\n  const { previous, next } = pageContext;\n\n  return (\n    <Layout>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <section className=\"hero custom-hero is-size-4-desktop is-size-5-touch\">\n        <div className=\"hero-body\">\n          <h1 className=\"reset title has-text-centered has-text-light\">\n            Blog\n          </h1>\n          <hr className=\"custom-hr5\" />\n        </div>\n      </section>\n      <section className=\"section is-size-4-desktop is-size-5-touch\">\n        <div className=\"columns is-centered\">\n          <div className=\"column is-two-thirds\">\n            <h1 className=\"reset post-title\">\n              {post.frontmatter.title}\n            </h1>\n            <p className=\"date\">\n              {post.frontmatter.date}\n            </p>\n            <MDXRenderer>\n              {post.body}\n            </MDXRenderer>\n            <hr className=\"hr-bio\" />\n            <Bio />\n\n            <ul className=\"change-post\">\n              <li>\n                {previous && (\n                  <Link to={`blog${previous.fields.slug}`} rel=\"prev\">\n                    ←\n                    {' '}\n                    {previous.frontmatter.title}\n                  </Link>\n                )}\n              </li>\n              <li>\n                {next && (\n                  <Link to={`blog${next.fields.slug}`} rel=\"next\">\n                    {next.frontmatter.title}\n                    {' '}\n                    →\n                  </Link>\n                )}\n              </li>\n            </ul>\n          </div>\n        </div>\n      </section>\n    </Layout>\n  );\n};\n\nBlogPostTemplate.propTypes = {\n  data: PropTypes.object.isRequired,\n  pageContext: PropTypes.object.isRequired,\n};\n\nexport default BlogPostTemplate;\n","const React = require(`react`)\nconst { useMDXComponents, mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components)\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, { components: mdxComponents, ...props })\n}\n"],"sourceRoot":""}