{"componentChunkName":"component---src-components-blog-post-js","path":"/blog/eslint-prettier-husky-lintstaged/","result":{"data":{"mdx":{"id":"c39dda13-5745-5fdd-a450-1f6edb1c4385","excerpt":"Recommended guides: How to Setup ESLint and Prettier for Your React Apps Extend “Create React App” with AirBnB’s ESLint config, Prettier, Flow and React Testing…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"how-to-integrate-eslint-prettier-husky-lintstaged\",\n  \"date\": \"2020-10-30T03:14:24.704Z\",\n  \"title\": \"How to Integrate ESLint + Prettier + Husky + Lint Staged\",\n  \"description\": \"Integrating the most useful development tools for JavaScript projects\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Recommended guides:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://thomlom.dev/setup-eslint-prettier-react/\"\n  }), \"How to Setup ESLint and Prettier for Your React Apps\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://medium.com/@pppped/extend-create-react-app-with-airbnbs-eslint-config-prettier-flow-and-react-testing-library-96627e9a9672\"\n  }), \"Extend \\u201CCreate React App\\u201D with AirBnB\\u2019s ESLint config, Prettier, Flow and React Testing Library.\"))), mdx(\"h2\", null, \"Installing dependencies\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://eslint.org/docs/user-guide/getting-started\"\n  }), \"Installing ESLint\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb\"\n  }), \"Installing Airbnb\\u2019s ESLint rules \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://prettier.io/docs/en/install.html\"\n  }), \"Installing Prettier\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/okonet/lint-staged\"\n  }), \"Installing Husky and Lint Staged\")))), mdx(\"h2\", null, \"ESLint\"), mdx(\"p\", null, \"ESLint will make sure you write code without syntax errors.\"), mdx(\"p\", null, \"Create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".eslintrc\"), \" (or use package.json) and add:\"), mdx(\"pre\", {\n    \"className\": \"grvsc-container default-dark\",\n    \"data-language\": \"\",\n    \"data-index\": \"0\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"grvsc-code\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"{\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"  \\\"extends\\\": [\\\"react-app\\\", \\\"airbnb\\\", \\\"airbnb/hooks\\\"],\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"  \\\"rules\\\": {\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"    \\\"semi\\\": [\\\"error\\\", \\\"never\\\"],\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"    \\\"jsx-quotes\\\": [\\\"error\\\", \\\"prefer-single\\\"],\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"    \\\"comma-dangle\\\": [\\\"error\\\", \\\"never\\\"],\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"    \\\"arrow-parens\\\": [\\\"error\\\", \\\"as-needed\\\"],\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"    \\\"react/jsx-filename-extension\\\": [\\\"error\\\", { \\\"extensions\\\": [\\\".js\\\", \\\".jsx\\\"] }]\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"  }\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"}\")))), mdx(\"p\", null, \"You can add this if you have to ignore \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"serviceWorker.js\"), \":\"), mdx(\"pre\", {\n    \"className\": \"grvsc-container default-dark\",\n    \"data-language\": \"\",\n    \"data-index\": \"1\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"grvsc-code\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"\\\"ignorePatterns\\\": [\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"  \\\"src/serviceWorker.js\\\"\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"],\")))), mdx(\"p\", null, \"I also recommend you to install ESLint\\u2019s extension on Visual Studio Code to better visualize the errors and warnings.\"), mdx(\"h2\", null, \"Prettier\"), mdx(\"p\", null, \"Prettier is an \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"opinionated\"), \" code formatter.\"), mdx(\"p\", null, \"I don\\u2019t like to integrate Prettier with ESLint. I\\u2019m using Prettier to format \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".json, .scss and .md\"), \" files. You don\\u2019t need to setup anything if you just want to format those files instead of formating \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".js\"), \" files.\"), mdx(\"h2\", null, \"Husky\"), mdx(\"p\", null, \"Husky can run commands upon commits, pushes etc.\"), mdx(\"p\", null, \"Create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".huskyrc.json\"), \" (or use package.json) and add:\"), mdx(\"pre\", {\n    \"className\": \"grvsc-container default-dark\",\n    \"data-language\": \"\",\n    \"data-index\": \"2\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"grvsc-code\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"{\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"  \\\"hooks\\\": {\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"    \\\"pre-commit\\\": \\\"lint-staged\\\"\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"  }\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"}\")))), mdx(\"p\", null, \"Husky will run lint-staged before commiting.\"), mdx(\"h2\", null, \"Lint Staged\"), mdx(\"p\", null, \"Instead of running ESLint and Prettier on every file, Lint Staged will make sure only files you changed will be checked. Create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".lintstagedrc.json\"), \" (or use package.json) and add:\"), mdx(\"pre\", {\n    \"className\": \"grvsc-container default-dark\",\n    \"data-language\": \"\",\n    \"data-index\": \"3\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"grvsc-code\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"{\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"  \\\"*.js\\\": \\\"eslint --fix\\\",\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"  \\\"*.{json,scss,md}\\\": \\\"prettier --single-quote --write\\\"\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"grvsc-line\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"grvsc-source\"\n  }), \"}\")))), mdx(\"p\", null, \"ESLint is gonna run on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".js\"), \" files and Prettier is gonna run on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".json, .scss and .md\"), \" files. You can change this if you need to run different formats.\"), mdx(\"h2\", null, \"That\\u2019s a wrap!\"), mdx(\"p\", null, \"Using all these tools will make sure you deliver better code in your projects. The only thing left for better development is to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"test your code\"), \" using tools like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React Testing Library\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Jest\"), \".\"), mdx(\"style\", {\n    \"className\": \"grvsc-styles\"\n  }, \"\\n  .grvsc-container {\\n    overflow: auto;\\n    position: relative;\\n    -webkit-overflow-scrolling: touch;\\n    padding-top: 1rem;\\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\\n    padding-bottom: 1rem;\\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\\n    border-radius: 8px;\\n    border-radius: var(--grvsc-border-radius, 8px);\\n    font-feature-settings: normal;\\n    line-height: 1.4;\\n  }\\n  \\n  .grvsc-code {\\n    display: table;\\n  }\\n  \\n  .grvsc-line {\\n    display: table-row;\\n    box-sizing: border-box;\\n    width: 100%;\\n    position: relative;\\n  }\\n  \\n  .grvsc-line > * {\\n    position: relative;\\n  }\\n  \\n  .grvsc-gutter-pad {\\n    display: table-cell;\\n    padding-left: 0.75rem;\\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\\n  }\\n  \\n  .grvsc-gutter {\\n    display: table-cell;\\n    -webkit-user-select: none;\\n    -moz-user-select: none;\\n    user-select: none;\\n  }\\n  \\n  .grvsc-gutter::before {\\n    content: attr(data-content);\\n  }\\n  \\n  .grvsc-source {\\n    display: table-cell;\\n    padding-left: 1.5rem;\\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\\n    padding-right: 1.5rem;\\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\\n  }\\n  \\n  .grvsc-source:empty::after {\\n    content: ' ';\\n    -webkit-user-select: none;\\n    -moz-user-select: none;\\n    user-select: none;\\n  }\\n  \\n  .grvsc-gutter + .grvsc-source {\\n    padding-left: 0.75rem;\\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\\n  }\\n  \\n  /* Line transformer styles */\\n  \\n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\\n    content: ' ';\\n    position: absolute;\\n    width: 100%;\\n  }\\n  \\n  .grvsc-line-diff-add::before {\\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\\n  }\\n  \\n  .grvsc-line-diff-del::before {\\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\\n  }\\n  \\n  .grvsc-line-number {\\n    padding: 0 2px;\\n    text-align: right;\\n    opacity: 0.7;\\n  }\\n  \\n  .default-dark {\\n    background-color: #1E1E1E;\\n    color: #D4D4D4;\\n  }\\n  .default-dark .grvsc-line-highlighted::before {\\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\\n  }\\n\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"How to Integrate ESLint + Prettier + Husky + Lint Staged","date":"October 30, 2020","description":"Integrating the most useful development tools for JavaScript projects"}}},"pageContext":{"slug":"/eslint-prettier-husky-lintstaged/","previous":{"fields":{"slug":"/software-manjaro-i3/"},"frontmatter":{"title":"Manjaro i3"}},"next":{"fields":{"slug":"/zsh/"},"frontmatter":{"title":"How to Setup a Nice Terminal Using Zsh"}}}},"staticQueryHashes":["3113223736","3649515864","63159454"]}